// main global script file


// A function that initializes a bunch of stuff. -----------------------------------------------------
function initialize_control_panel() { 

  // Center the control panel
  gControlPanel.Centre();
    
  // Set all the defaults
  System.Volume = 70;
  sldAudio.Value = System.Volume;
  SetGameSpeed(60);
  sldSpeed.Value =60;

}

// called when the game starts, before the first room is loaded
function game_start() 
{
  // register a GUI to use for the inventory bar
  TwoClickHandler.InventoryGUI = gInventoryBar;

  // register a Label to use for action text
  TwoClickHandler.ActionLabel = lblAction;

  // optionally set the popup distance for the inventory bar
  //TwoClickHandler.PopupProportional = 0.5;
  //TwoClickHandler.PopupDistance = 50;

  // optionally reverse the left and right mouse buttons
  //TwoClickHandler.ReversedClicks = true;
  
  initialize_control_panel();
  
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute() 
{
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{
}


//Control Panel Quit
function btnQuit2_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = false;
  Wait(1);
  QuitGame(0);
}


// ------------------- Save Game Dialog --------------------------------------------------------------
function show_save_game_dialog()
{
  
  gSaveGame.Visible = true;
  
  // Get the list of save games
  lstSaveGamesList.FillSaveGameList();
  
  if (lstSaveGamesList.ItemCount > 0)
  {
    // If there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // No save games yet, default empty text.
    txtNewSaveName.Text = "";
  }

}


//Audio Change
function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

//Speed Change
function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

function btnSave_OnClick(GUIControl *control, MouseButton button)
{
    gControlPanel.Visible = false;
    show_save_game_dialog();
}


//------------------ Restore Game Dialog -------------------------------------------------------------
function show_restore_game_dialog()
{
  gRestoreGame.Visible = true;
  lstRestoreGamesList.FillSaveGameList();
}
//------------------End Restore Dialog---------------------------------------------------------------

// --- SAVE functions ----
function close_save_game_dialog()
{
  gSaveGame.Visible = false;
}

function btnCancelSave_OnClick(GUIControl *control, MouseButton button)
{
  close_save_game_dialog();
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = lstSaveGamesList.ItemCount + 1;
  int i = 0;
  
  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == txtNewSaveName.Text)
    {
      gameSlotToSaveInto = lstSaveGamesList.SaveGameSlots[i];
    }
    i++;
  }
  SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
  close_save_game_dialog();
}


function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}


function txtNewSaveName_OnActivate(GUIControl *control)
{
  // Pressing return in the text box simulates clicking the Save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}
// ------------ End SAVE functions -------------


// ----- RESTORE functions ---------------------

function close_restore_game_dialog()
{
  gRestoreGame.Visible = false;
}

function btnCancelRestore_OnClick(GUIControl *control, MouseButton button)
{
  close_restore_game_dialog();
}


function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }
  close_restore_game_dialog();
}
// ---- End RESTORE functions


//Loading
function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = false;
  Wait(1);
  show_restore_game_dialog();
}

//Resume
function btnResume_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = false;
}

function bOptions_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = true;
}

// called when a key is pressed
function on_key_press(eKeyCode keycode) 
{
  if (IsGamePaused()) keycode = 0;
  
  if (keycode == eKeyCtrlQ)
  {
    // Ctrl-Q will quit the game
    QuitGame(1);
  }
  else if (keycode == eKeyF9)
  {
    // F9 will restart the game
    RestartGame();
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyCtrlS)
  {
    // Ctrl-S will give the player all defined inventory items
    Debug(0, 0);
  }
  else if (keycode == eKeyCtrlV)
  {
    // Ctrl-V will show game engine version and build date
    Debug(1, 0);
  }
  else if (keycode == eKeyCtrlA)
  {
    // Ctrl-A will show walkable areas
    Debug(2, 0); 
  }
  else if (keycode == eKeyCtrlX)
  {
    // Ctrl-X will let the player teleport to any room
    Debug(3, 0);
  }

 
  if ((keycode == eKeyEscape) && (gSaveGame.Visible))
  {
    // Use ESC to close the save game dialog
    close_save_game_dialog();
    return;
  }
  
  
  if ((keycode == eKeyEscape) && (gRestoreGame.Visible))
  {
    // Use ESC to close the restore game dialog
    close_restore_game_dialog();
    return;
  }
  
  if ((keycode == eKeyEscape) && gControlPanel.Visible) {
    // Use ESC to turn the panel off.
    gControlPanel.Visible = false; 
    //mouse.UseDefaultGraphic();
    return;
  }

    // FUNCTION KEYS AND SYSTEM SHORTCUTS
  if (keycode == eKeyEscape) {
    // ESC
    gControlPanel.Visible = true; 
    //mouse.UseModeGraphic(eModePointer);
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  // all clicks handled by TwoClickHandler script
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type) 
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      player.Say("I see nothing special about it.");
    }
    else if (type == 2) // interact
    {
      player.Say("I can't do anything with it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That won't do anything.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      player.Say("Looks alright.");
    }
    else if (type == 1) // interact
    {
      player.Say("I don't want it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's a funny idea.");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      player.Say("Hmm.");
    }
    else if (type == 1) // interact
    {
      player.Say("Got nothing to say.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("I don't think I should give that away.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      player.Say("It's just some junk in my inventory.");
    }
    else if (type == 1) // interact
    {
      player.Say("Er, no?");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's ridiculous.");
    }
  }
}

function btnInvLeft_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnInvRight_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnPlay_OnClick(GUIControl *control, MouseButton button)
{
  gExitGame.Visible = false;
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function bPower_OnClick(GUIControl *control, MouseButton button)
{
  gInventoryBar.Visible = false;
  gExitGame.Visible = true;
}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = false;
  gAbout.Visible = true;

}



function btnAboutOK_OnClick(GUIControl *control, MouseButton button)
{
  gAbout.Visible = false;
}

function btnStartGame_OnClick(GUIControl *control, MouseButton button)
{
  gStart.Visible = false;
  cRoger.ChangeRoom(2);
}


function btnStartQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function gInventoryBar_OnClick(GUI *theGui, MouseButton button)
{

}
