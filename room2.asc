// room script file

  GUI* playercards[];
  
  int playerlist[10];
  int doglist[10];
  int cardlist[20];


//Check if number already exists in list of cards dealt
function have_card_already(int cardnum, int max) {
  
  for (int i = 0; i < max; i++) {
    
    if (cardnum == cardlist[i])
    return 1;
    
  }  
  return 0;
}


//Deal random cards to player and dog
function deal_cards(int max) {
  
  int num;
  
  for (int i = 0; i < max; i++) {
   
   //Pick random number, until you find one not already chosen
   do {
      num = Random(100);
   }
   while(have_card_already(num, max));
   
   cardlist[i] = num;
   
   // Assign player and dog cards
   if (i < 10) {
     playerlist[i] = cardlist[i];     
   }
   else {
     doglist[i-10] = cardlist[i];
   }
   
  }
  
}

function Xspot(int num) {
  
  switch (num)
{
    case 1:
        return 10;
        break;
    case 2:
        return 40;
        break;
    case 3:
        return 70;
        break;
    case 4:
        return 110;
        break;
    case 5:
        return 140;
        break;
    case 6:
        return 170;
        break;
    case 7:
        return 200;
        break;
    case 8:
        return 230;
        break;
    case 9:
        return 260;
        break;
    case 10:
        return 300;
        break;
    default:
        Display("This might be a bug! Please let HanaIndiana know.");
        break;
}

}

function Yspot() {
  
 return 138;
 
}



function room_Load()
{

// Initilize player cards

  gTopcard.Visible = true;
  gPlay.Visible = true;

  //TODO Add sort function to list of player cards (dog cards too?)
  //TODO show last card played as TopCard
  gPlay.X = Xspot(6);
  
  playercards = new GUI[max_level];
  playercards[0] = gCard0;
  playercards[1] = gCard1;
  playercards[2] = gCard2;
  playercards[3] = gCard3;
  playercards[4] = gCard4;
  playercards[5] = gCard5;
  playercards[6] = gCard6;
  playercards[7] = gCard7;
  playercards[8] = gCard8;
  playercards[9] = gCard9;
  
  
  // Place cards on screen  
   for (int i = 0; i < max_level; i++)
  {
    if (i == 0) { 
        playercards[0].X = 6; 
    }
    else {
        playercards[i].X = playercards[i-1].X + 26;
    }

  }
  
  
  //Remove cards
  for (int i = 0; i < max_level; i++)
  {
    playercards[i].Visible = false;
  }
  
  //Only show cards for current level
  for (int i = 0; i < curr_level; i++)
  {
    playercards[i].Visible = true;
  }
  
  //Initialize cardlist
  for (int i = 0; i < max_level; i++) {
   
    cardlist[i] = -1;
    
  }
  
  //Set cardlist array
  deal_cards(20);
  
 
}


// After Room Fades In
function room_AfterFadeIn()
{
  
  Display("Level %d", curr_level );
  Display("Card1 is a %d", cardlist[0]);
  Display("Card2 is a %d", cardlist[1]);
 

  lblNum0.Text = String.Format("%d", cardlist[0]);
  lblNum1.Text = String.Format("%d", cardlist[1]);
  lblNum2.Text = String.Format("%d", cardlist[2]);
  lblNum3.Text = String.Format("%d", cardlist[3]);
  lblNum4.Text = String.Format("%d", cardlist[4]);
  lblNum5.Text = String.Format("%d", cardlist[5]);
  lblNum6.Text = String.Format("%d", cardlist[6]);
  lblNum7.Text = String.Format("%d", cardlist[7]);
  lblNum8.Text = String.Format("%d", cardlist[8]);
  lblNum9.Text = String.Format("%d", cardlist[9]);
  
  gDogCards.Visible = true;
  

  cDeath.Say("Play! If you dare.");
  
  
  
 

}
