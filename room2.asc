// room script file

  
  GUI* playercards[];
  
  int playerlist[10];
  int doglist[10];
  int cardlist[20];
  
  int dog_cards_left;
  int okay_to_play = 1;
  int prev_card = 0;
  
  int extralives = 1;
  int specialpowers = 1;



//--------------------------------------------------------------------------------------

// Win game function -------------------------------------------------------------------
function win_game() {

Display("Woohoo! I've won! Elska and I can go back to Earth!");  

// Add ending cut scene, and ask if want to replay

}
//--------------------------------------------------------------------------------------



// Lose game function
function lose_game() {
  
Display("NOOooo!");
cDeath.Say("You two are coming with me!");
okay_to_play = 0;

Display("End scene is here.. game over.");

// Add ending cut scene, and ask if want to replay

}
//--------------------------------------------------------------------------------------


// Set Dog Timer - number of ticks Elska waits before playing a card
// Based on the odds of the player having a lower card
function set_dog_timer() {
  
  int random_wait;
  float num_lower_cards;
  float card_total;
  float odds;

    //Calculate number of potential cards lower than dog's card
    num_lower_cards = IntToFloat(doglist[0]) - IntToFloat(prev_card);
    
    Display("doglist[0]= %d", doglist[0]);
    Display("prev_card= %d", prev_card);
    Display("num_lower_cards = %d", FloatToInt(num_lower_cards) );
    
    //Total potential cards in play
    card_total = IntToFloat( 100 - (dog_cards_left - 1));
    
    Display("dog_cards_left = %d", dog_cards_left );
    Display("card_total = %d", FloatToInt(card_total) );
    
    //Likelyhood of player having a lower card
    odds = (num_lower_cards/card_total) * 100.0;
    
    Display("Odds = %d", FloatToInt(odds) );
    
    // How long Elska waits depends on odds of player having a lower card
    if (FloatToInt(odds) <= 3) {
      
      random_wait = Random(100) + 50;
      SetTimer(Dog_Delay,random_wait);
      
    }
    else if (FloatToInt(odds) > 3 || FloatToInt(odds) <= 8) {
      
      //Wags tail
      random_wait = Random(400) + 100;
      SetTimer(Dog_Delay,random_wait);

    }
    else if (FloatToInt(odds) > 8 || FloatToInt(odds) <= 15) {
      
      //Wags tail
      random_wait = Random(1000) + 500;
      SetTimer(Dog_Delay,random_wait);

    }
    else if ( FloatToInt(odds) > 15 ) {
      
      //Whines and/or wags tail
      random_wait = Random(1200) + 1500;
      SetTimer(Dog_Delay,random_wait);
      
    }
    else {
     
     //Whine
     Display("Elska is confused...");
     SetTimer(Dog_Delay,75);
    }
    
  
}
 
// Sort playing cards from small to large ----------------------------------------------
function sort(String cardtype) {
  
  int count = 0;
  int num = 0;
  
  // Sort player cards
  if (cardtype == "player") {
   
    do {
        count = 0;
 
        for (int i = 0; i < curr_level-1; i++) {     
    
          if (playerlist[i] > playerlist[i+1]) {
            
            num = playerlist[i];
            playerlist[i] = playerlist[i+1];
            playerlist[i+1] = num;
            count++;
          }
        }
    } while (count > 0);
    
  }
  
  // Sort dog cards
  if (cardtype == "dog") {
    
    do {
        count = 0;
      
        for (int i = 0; i < curr_level-1; i++) {
    
          if (doglist[i] > doglist[i+1]) {
      
            num = doglist[i];
            doglist[i] = doglist[i+1];
            doglist[i+1] = num;
            count++;
          }
        }
    } while (count > 0);
    
  }

  
}
//--------------------------------------------------------------------------------------



//Check if number already exists in list of cards dealt --------------------------------
function have_card_already(int cardnum, int max) {
  
  for (int i = 0; i < max; i++) {
    
    if (cardnum == cardlist[i])
    return 1;
    
  }  
  return 0;
  
}
//--------------------------------------------------------------------------------------


// Redraw the dog's hand of cards to match the # of cards they have left ---------------
function redraw_dog_cards() {
  
  if (dog_cards_left == 0) {gDogCards.Visible = false;}
  else if (dog_cards_left == 1) {gDogCards.BackgroundGraphic = 1;}  //One card
  else if (dog_cards_left == 2) {gDogCards.BackgroundGraphic = 13;} //Two cards...
  else if (dog_cards_left == 3) {gDogCards.BackgroundGraphic = 14;}
  else if (dog_cards_left == 4) {gDogCards.BackgroundGraphic = 3;}
  else if (dog_cards_left == 5) {gDogCards.BackgroundGraphic = 15;}
  else if (dog_cards_left == 6) {gDogCards.BackgroundGraphic = 16;}
  else if (dog_cards_left == 7) {gDogCards.BackgroundGraphic = 17;}
  else if (dog_cards_left == 8) {gDogCards.BackgroundGraphic = 18;}
  else if (dog_cards_left == 9) {gDogCards.BackgroundGraphic = 19;}
  else {gDogCards.BackgroundGraphic = 20;}
}
//--------------------------------------------------------------------------------------


// Update what the topcard shows -------------------------------------------------------
function update_topcard(int num) {
  
  lblTopcard.Text = String.Format("%d", num);
  
}
//--------------------------------------------------------------------------------------


//Deal random cards to player and dog --------------------------------------------------
function deal_cards(int max) {
  
  int num;
  
  for (int i = 0; i < max; i++) {
   
   //Pick random number, until you find one not already chosen
   do {
      num = Random(100);
      if (num == 0) {num = 1;}
   }
   while(have_card_already(num, max));
   
   cardlist[i] = num;
   
   // Assign player and dog cards
   if (i < curr_level) {
     playerlist[i] = cardlist[i];     
   }
   else {
     doglist[i-curr_level] = cardlist[i];
   }

  }

}
//--------------------------------------------------------------------------------------


// Draw the extra life and discard cards to the screen ---------------------------------
function draw_special_cards() {
   
   oLife1.Visible = false;
   oLife2.Visible = false;
   oLife3.Visible = false;
   
   oDiscard1.Visible = false;
   oDiscard2.Visible = false;
   oDiscard3.Visible = false;
   oDiscard4.Visible = false;
   oDiscard5.Visible = false;
   
  if (extralives == 1) { oLife1.Visible = true;}
  
  if (extralives == 2) { 
    oLife1.Visible = true;
    oLife2.Visible = true;
  }
  
  if (extralives == 3) { 
    oLife1.Visible = true;
    oLife2.Visible = true;
    oLife3.Visible = true;
  }
  
  if (specialpowers == 1) { 
    oDiscard1.Visible = true;
  }
  
  if (specialpowers == 2) { 
    oDiscard1.Visible = true;
    oDiscard2.Visible = true;
  }
  
  if (specialpowers == 3) { 
    oDiscard1.Visible = true;
    oDiscard2.Visible = true;
    oDiscard3.Visible = true;
  } 
    
  if (specialpowers == 4) { 
    oDiscard1.Visible = true;
    oDiscard2.Visible = true;
    oDiscard3.Visible = true;
    oDiscard4.Visible = true;
  } 
  
  if (specialpowers == 5) { 
    oDiscard1.Visible = true;
    oDiscard2.Visible = true;
    oDiscard3.Visible = true;
    oDiscard4.Visible = true;
    oDiscard5.Visible = true;
  } 
   
   
 }
//--------------------------------------------------------------------------------------


// Draw the cards to the screen --------------------------------------------------------
function draw_cards() {
  
  if (playerlist[9] == 666) {gCard9.Visible = false;}
  if (playerlist[8] == 666) {gCard8.Visible = false;}
  if (playerlist[7] == 666) {gCard7.Visible = false;}
  if (playerlist[6] == 666) {gCard6.Visible = false;}
  if (playerlist[5] == 666) {gCard5.Visible = false;}
  if (playerlist[4] == 666) {gCard4.Visible = false;}
  if (playerlist[3] == 666) {gCard3.Visible = false;}
  if (playerlist[2] == 666) {gCard2.Visible = false;}
  if (playerlist[1] == 666) {gCard1.Visible = false;}
  if (playerlist[0] == 666 && doglist[0] != 666) {gCard0.Visible = false;}
  
  if (playerlist[0] == 666 && doglist[0] == 666) {
    
    gCard0.Visible = false;
    
    Display("Starting next level...");
    curr_level = curr_level + 1;
    
    if (curr_level == max_level+1) {  
        
        win_game();
    }
    else {
      
        cPlayer.ChangeRoom(2);
    }

}
  
  lblNum0.Text = String.Format("%d", playerlist[0]);
  lblNum1.Text = String.Format("%d", playerlist[1]);
  lblNum2.Text = String.Format("%d", playerlist[2]);
  lblNum3.Text = String.Format("%d", playerlist[3]);
  lblNum4.Text = String.Format("%d", playerlist[4]);
  lblNum5.Text = String.Format("%d", playerlist[5]);
  lblNum6.Text = String.Format("%d", playerlist[6]);
  lblNum7.Text = String.Format("%d", playerlist[7]);
  lblNum8.Text = String.Format("%d", playerlist[8]);
  lblNum9.Text = String.Format("%d", playerlist[9]);
   
}
//--------------------------------------------------------------------------------------


// Handle the card play ----------------------------------------------------------------
 function handle_play(String cardtype) {
   
   okay_to_play = 0;
   
   // Dog plays a card
   if (cardtype == "dog") {
      
      update_topcard(doglist[0]);
      cDog.Say("Bark!");
      cPlayer.Say("Elska played a %d", doglist[0] );
      dog_cards_left = dog_cards_left - 1;
      
      // Good play by dog
      if (doglist[0] < playerlist[0]) {
         
          cPlayer.Say("Yay!");
          prev_card = doglist[0];
          doglist[0] = 666;
          
          redraw_dog_cards();      
          sort("dog");
      }
      else {
        
          // Bad play by dog
          cPlayer.Say("Oh no!");
          
          // Remove all player cards that are less than dog's card
          for (int i = 0; i < curr_level; i++) {
          
            if (playerlist[i] < doglist[0]) {
                
                prev_card = playerlist[i];
                playerlist[i] = 666;
                
            }
          }

          doglist[0] = 666;
          redraw_dog_cards();
          
          // Re-sort cards
          sort("player");
          sort("dog");
          extralives--;
        
      }
     
   }
   
   // Player plays a card
   if (cardtype == "player") {
        
      //cPlayer.Say("Elska has a %d", doglist[0] );
     
      if (doglist[0] > playerlist[0]) {
         
         // Good play by Player
          cPlayer.Say("Yay!");
          update_topcard(playerlist[0]);
          prev_card = playerlist[0];
          playerlist[0] = 666;
          sort("player");
      
      }
      else {
        
          // Bad play by player
          cPlayer.Say("Oops! Elska has a %d", doglist[0] );
          
          prev_card = playerlist[0];
           
          // Remove lowest cards from both players
          playerlist[0] = 666;
          doglist[0] = 666;
          dog_cards_left = dog_cards_left - 1;
          
          redraw_dog_cards();
          
          // Re-sort cards
          sort("player");
          sort("dog");
          extralives--;
        
      }
   }
   
   if (extralives < 0) {
     
     lose_game();
   }
   else {
      // Draw updated cards to the screen
      draw_cards();
      Display("Extralives = %d", extralives );
   
      draw_special_cards();
      okay_to_play = 1;
   
      //reset Dog AI timers
      set_dog_timer();
      SetTimer(Force_Dog_Delay, 50);
   }
   
 }
 //--------------------------------------------------------------------------------------
 


// Load room before fade-in -------------------------------------------------------------
function room_Load()
{
  
  // Leveling up awards
  if (curr_level == 2) { specialpowers++;}
  if (curr_level == 3) { extralives++;}
  if (curr_level == 5) { specialpowers++;}  
  if (curr_level == 6) { extralives++;}
  if (curr_level == 8) { specialpowers++;}
  if (curr_level == 9) { specialpowers++;}
  ///////
  
  // Reset play
  lblTopcard.Text = "";
  okay_to_play = 1;
  prev_card = 0;
  
  // Number of cards dog has left
  dog_cards_left = curr_level;
  
  // Initilize player cards
  gTopcard.Visible = true;

  playercards = new GUI[max_level];
  playercards[0] = gCard0;
  playercards[1] = gCard1;
  playercards[2] = gCard2;
  playercards[3] = gCard3;
  playercards[4] = gCard4;
  playercards[5] = gCard5;
  playercards[6] = gCard6;
  playercards[7] = gCard7;
  playercards[8] = gCard8;
  playercards[9] = gCard9;
  
  
  // Place cards on screen
   for (int i = 0; i < max_level; i++)
  {
    if (i == 0) { 
        playercards[0].X = 6; 
    }
    else {
        playercards[i].X = playercards[i-1].X + 26;
    }
  }
  
  //Remove cards
  for (int i = 0; i < max_level; i++)
  {
    playercards[i].Visible = false;
  }
  
  //Only show cards for current level
  for (int i = 0; i < curr_level; i++)
  {
    playercards[i].Visible = true;
  }
  
  //Initialize cardlist
  for (int i = 0; i < max_level+max_level; i++) {
   
    cardlist[i] = 666;
  }
  for (int i = 0; i < max_level; i++) {
   
    playerlist[i] = 666;
    doglist[i] = 666;
  }
  
  //Set cardlist array
  deal_cards(curr_level+curr_level);
  
  //Draw dog cards
  redraw_dog_cards();
      
  gDogCards.Visible = true;
  draw_special_cards();
  
  //Blank out cards to start (will draw later)
  lblNum0.Text = "";
  lblNum1.Text = "";
  lblNum2.Text = "";
  lblNum3.Text = "";
  lblNum4.Text = "";
  lblNum5.Text = "";
  lblNum6.Text = "";
  lblNum7.Text = "";
  lblNum8.Text = "";
  lblNum9.Text = "";
  
}
//--------------------------------------------------------------------------------------

// After Room Fades In -----------------------------------------------------------------
function room_AfterFadeIn()
{

  // Draw Level card to indicate new level
  lblLevel.Text = String.Format("LEVEL %d", curr_level);
  gLevel.Visible = true;
  Wait(150);
  gLevel.Visible = false;
  //-----------------------------------------
  
  Display("Dealing cards....");
  
  // Sort the playing cards (smallest to largest)
  sort("player");
  sort("dog");

  //Draw player cards to the screen and check for win status
  draw_cards();
  
  //Draw dog cards to the screen
  gDogCards.Visible = true;
  
  //Set dog's timer for when she plays card
  set_dog_timer();

}
//--------------------------------------------------------------------------------------
 
 // The button that plays the player's next card (the lowest card) ---------------------
function oOverlay_Interact()
{
  //Block dog from playing
  okay_to_play = 0; 
  
  // Player has played their card
  handle_play("player");

}
//--------------------------------------------------------------------------------------

// Repeat Execution (dog AI logic) -----------------------------------------------------
function room_RepExec()
{
  
  // Check if player has already layed down a card
  if (okay_to_play) {
    
  
    
      // If Elska has the '1' card
      if (doglist[0] == 1 && IsTimerExpired(Force_Dog_Delay)) {

        handle_play("dog");
      }
      // If Elska has the next card
      else if (doglist[0] <= prev_card+1 && dog_cards_left > 0 && IsTimerExpired(Force_Dog_Delay) ) {
        
        handle_play("dog");
      }
      // If player has no more cards
      else if (playerlist[0] == 666 && dog_cards_left > 0 && IsTimerExpired(Force_Dog_Delay) ) {
        
        handle_play("dog");
      }
      // If no one plays for awhile, Elska will go
      else if (IsTimerExpired(Dog_Delay) && dog_cards_left > 0) {
        
        handle_play("dog");
        
      }
      else {
        
        //do nothing
      }
      
  }
  // end of okay_to_play
  

} 
//--------------------------------------------------------------------------------------


// Click on a Discard card (5 cards max) -----------------------------------------------
function oDiscard1_AnyClick()
{
  okay_to_play = 0; // Pause play
  
  if (playerlist[0] == 666 || dog_cards_left < 1) {
    cDeath.Say("Only one of you has cards. Sigh.. I'll let it pass.");
    okay_to_play = 1;
  }
  else {
      // Play a sound
      aHarp.Play();

      specialpowers--;
      draw_special_cards();
  
      prev_card = playerlist[0];
           
      // Remove lowest cards from both players
      playerlist[0] = 666;
      doglist[0] = 666;
      dog_cards_left = dog_cards_left - 1;
          
      redraw_dog_cards();
          
      // Re-sort cards
      sort("player");
      sort("dog");
      draw_cards();
  
      okay_to_play = 1;
   
      //reset Dog AI timers
      //SetTimer(Dog_Delay, 500);
      set_dog_timer();
      SetTimer(Force_Dog_Delay, 100);
  }
      
}

function oDiscard2_AnyClick()
{
  okay_to_play = 0; // Pause play
  
  if (playerlist[0] == 666 || dog_cards_left < 1) {
    cDeath.Say("Only one of you has cards. Sigh.. I'll let it pass.");
    okay_to_play = 1;
  }
  else {
  
        // Play a sound
        aHarp.Play();

        specialpowers--;
        draw_special_cards();
  
        prev_card = playerlist[0];
           
        // Remove lowest cards from both players
        playerlist[0] = 666;
        doglist[0] = 666;
        dog_cards_left = dog_cards_left - 1;
          
        redraw_dog_cards();
          
        // Re-sort cards
        sort("player");
        sort("dog");
        draw_cards();

        okay_to_play = 1;
   
        //reset Dog AI timers
        set_dog_timer();
        SetTimer(Force_Dog_Delay, 100);
  }
  
}


function oDiscard3_AnyClick()
{
  okay_to_play = 0; // Pause play
  
  if (playerlist[0] == 666 || dog_cards_left < 1) {
    cDeath.Say("Only one of you has cards. Sigh.. I'll let it pass.");
    okay_to_play = 1;
  }
  else {
          // Play a sound
          aHarp.Play();

          specialpowers--;
          draw_special_cards();
  
          prev_card = playerlist[0];
           
          // Remove lowest cards from both players
          playerlist[0] = 666;
          doglist[0] = 666;
          dog_cards_left = dog_cards_left - 1;
          
          redraw_dog_cards();
          
          // Re-sort cards
          sort("player");
          sort("dog");
          draw_cards();

          okay_to_play = 1;
   
          //reset Dog AI timers
          set_dog_timer();
          SetTimer(Force_Dog_Delay, 100);
  }
  
}


function oDiscard4_AnyClick()
{
  okay_to_play = 0; // Pause play
  
  if (playerlist[0] == 666 || dog_cards_left < 1) {
    cDeath.Say("Only one of you has cards. Sigh.. I'll let it pass.");
    okay_to_play = 1;
  }
  else {
          // Play a sound
          aHarp.Play();

          specialpowers--;
          draw_special_cards();
  
          prev_card = playerlist[0];
           
          // Remove lowest cards from both players
          playerlist[0] = 666;
          doglist[0] = 666;
          dog_cards_left = dog_cards_left - 1;
          
          redraw_dog_cards();
          
          // Re-sort cards
          sort("player");
          sort("dog");
          draw_cards();

          okay_to_play = 1;
   
          //reset Dog AI timers
          set_dog_timer();
          SetTimer(Force_Dog_Delay, 100);
  }
  
}


function oDiscard5_AnyClick()
{
  okay_to_play = 0; // Pause play
  
  if (playerlist[0] == 666 || dog_cards_left < 1) {
    cDeath.Say("Only one of you has cards. Sigh.. I'll let it pass.");
    okay_to_play = 1;
  }
  else {
          // Play a sound
          aHarp.Play();

          specialpowers--;
          draw_special_cards();
  
          prev_card = playerlist[0];
           
          // Remove lowest cards from both players
          playerlist[0] = 666;
          doglist[0] = 666;
          dog_cards_left = dog_cards_left - 1;
          
          redraw_dog_cards();
          
          // Re-sort cards
          sort("player");
          sort("dog");
          draw_cards();

          okay_to_play = 1;
   
          //reset Dog AI timers
          set_dog_timer();
          SetTimer(Force_Dog_Delay, 50);
  
  }
  
}


// End of Discard cards -----------------------------------------------