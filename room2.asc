// room script file

  GUI* playercards[];
  
  int playerlist[10];
  int doglist[10];
  int cardlist[20];


function sort(String cardtype) {
  
  int count = 0;
  int num = 0;
  
  // Sort player cards
  if (cardtype == "player") {
    
    do {
        count = 0;
      
        for (int i = 0; i < 9; i++) {
    
          if (playerlist[i] > playerlist[i+1]) {
      
            num = playerlist[i];
            playerlist[i] = playerlist[i+1];
            playerlist[i+1] = num;
            count++;
          }
        }
    } while (count > 0);
    
  }
  
  // Sort dog cards
  if (cardtype == "dog") {
    
    do {
        count = 0;
      
        for (int i = 0; i < 9; i++) {
    
          if (doglist[i] > doglist[i+1]) {
      
            num = doglist[i];
            doglist[i] = doglist[i+1];
            doglist[i+1] = num;
            count++;
          }
        }
    } while (count > 0);
    
  }

  
}


//Check if number already exists in list of cards dealt
function have_card_already(int cardnum, int max) {
  
  for (int i = 0; i < max; i++) {
    
    if (cardnum == cardlist[i])
    return 1;
    
  }  
  return 0;
  
}


//Deal random cards to player and dog
function deal_cards(int max) {
  
  int num;
  
  for (int i = 0; i < max; i++) {
   
   //Pick random number, until you find one not already chosen
   do {
      num = Random(100);
   }
   while(have_card_already(num, max));
   
   cardlist[i] = num;
   
   // Assign player and dog cards
   if (i < 10) {
     playerlist[i] = cardlist[i];     
   }
   else {
     doglist[i-10] = cardlist[i];
   }

  }

}

function draw_cards() {
  
  if (playerlist[9] == 999) {gCard9.Visible = false;}
  if (playerlist[8] == 999) {gCard8.Visible = false;}
  if (playerlist[7] == 999) {gCard7.Visible = false;}
  if (playerlist[6] == 999) {gCard6.Visible = false;}
  if (playerlist[5] == 999) {gCard5.Visible = false;}
  if (playerlist[4] == 999) {gCard4.Visible = false;}
  if (playerlist[3] == 999) {gCard3.Visible = false;}
  if (playerlist[2] == 999) {gCard2.Visible = false;}
  if (playerlist[1] == 999) {gCard1.Visible = false;}
  
  if (playerlist[0] == 999) {
    
    gCard0.Visible = false;
    Display("Last card played...");
    cPlayer.ChangeRoom(2);
  }
  
  lblNum0.Text = String.Format("%d", playerlist[0]);
  lblNum1.Text = String.Format("%d", playerlist[1]);
  lblNum2.Text = String.Format("%d", playerlist[2]);
  lblNum3.Text = String.Format("%d", playerlist[3]);
  lblNum4.Text = String.Format("%d", playerlist[4]);
  lblNum5.Text = String.Format("%d", playerlist[5]);
  lblNum6.Text = String.Format("%d", playerlist[6]);
  lblNum7.Text = String.Format("%d", playerlist[7]);
  lblNum8.Text = String.Format("%d", playerlist[8]);
  lblNum9.Text = String.Format("%d", playerlist[9]);
   
}

// Return x location on screen
function Xspot(int num) {
  
      switch (num)
    {
        case 1:
            return 10;
            break;
        case 2:
            return 40;
            break;
        case 3:
            return 70;
            break;
        case 4:
            return 110;
            break;
        case 5:
            return 140;
            break;
        case 6:
            return 170;
            break;
        case 7:
            return 200;
            break;
        case 8:
            return 230;
            break;
        case 9:
            return 260;
            break;
        case 10:
            return 300;
            break;
        default:
            Display("This might be a bug! Please let HanaIndiana know.");
            break;
    }

}

// Load room before fade-in
function room_Load()
{

  // Initilize player cards
  gTopcard.Visible = true;
  //gPlay.Visible = true;

  //TODO show last card played as TopCard  95, 100
  
  playercards = new GUI[max_level];
  playercards[0] = gCard0;
  playercards[1] = gCard1;
  playercards[2] = gCard2;
  playercards[3] = gCard3;
  playercards[4] = gCard4;
  playercards[5] = gCard5;
  playercards[6] = gCard6;
  playercards[7] = gCard7;
  playercards[8] = gCard8;
  playercards[9] = gCard9;
  
  
  // Place cards on screen
   for (int i = 0; i < max_level; i++)
  {
    if (i == 0) { 
        playercards[0].X = 6; 
    }
    else {
        playercards[i].X = playercards[i-1].X + 26;
    }
  }
  
  
  //Remove cards
  for (int i = 0; i < max_level; i++)
  {
    playercards[i].Visible = false;
  }
  
  //Only show cards for current level
  for (int i = 0; i < curr_level; i++)
  {
    playercards[i].Visible = true;
  }
  
  //Initialize cardlist
  for (int i = 0; i < max_level; i++) {
   
    cardlist[i] = -1;
    
  }
  
  //Set cardlist array
  deal_cards(20);

}


// After Room Fades In
function room_AfterFadeIn()
{
  
  Display("Level %d", curr_level );
  sort("player");
  sort("dog");

  Display("Dealing new cards....");
  draw_cards();
  
  gDogCards.Visible = true;

}

 function handle_play(String cardtype) {
   
   // Dog plays a card
   if (cardtype == "dog") {
     
      cDog.Say("Bark!");
     
   }
   
   // Player plays a card
   if (cardtype == "player") {
        
      cPlayer.Say("Here goes nothing!");
      cPlayer.Say("I have a %d", playerlist[0] );
      cPlayer.Say("Elska has a %d", doglist[0] );
     
      if (doglist[0] > playerlist[0]) {
         
          cPlayer.Say("Whew! One more card down!");
          playerlist[0] = 999;
          sort("player");
      
      }
      else {
        
          cPlayer.Say("Oh no! I lost a life!");
          cPlayer.Say("Elska has a %d", doglist[0] );
          playerlist[0] = 999;
          doglist[0] = 999;
          sort("player");
          sort("dog");       
        
      }
   }
   
   draw_cards();
   
   
 }
 
function oOverlay_Interact()
{
  
  handle_play("player");

}
